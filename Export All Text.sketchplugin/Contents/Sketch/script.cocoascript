var onRun = function(context) {

    // General Declarations
    var selection = context.selection
    var document = context.document
    var originalPage = document.currentPage()

    var pathToContentsFolder = context.scriptPath.stringByDeletingLastPathComponent().stringByDeletingLastPathComponent()
    var pathToSettingsFile = pathToContentsFolder.stringByAppendingPathComponent("/Sketch/LastSettings.plist")

    mainFunction()

    function isLayerNameInvalid(layerName) {
        return layerName.length() >= 2 && layerName.substringToIndex(2).isEqualToString("!!")
    }

    /* Main Function */

    function mainFunction() {

        // Creating Temp Page
        var tempPage = originalPage.copy()
        tempPage.name = "Temp Page"
        document.documentData().addPage(tempPage)

        var artboards = NSMutableArray.array()

        var pageChildrenLoop = tempPage.children().reverseObjectEnumerator()
        while (pageChild = pageChildrenLoop.nextObject()) {
            if (pageChild.isMemberOfClass(MSArtboardGroup)) {
                var artboard = pageChild

                var artboardName = pageChild.nodeName()
                var dotRange = artboardName.rangeOfString(".")
                if (dotRange.location != NSNotFound) {
                    artboard.nodeName = artboardName.substringFromIndex(dotRange.location + 1)
                }

                artboards.addObject(artboard)
            } else if (pageChild.isMemberOfClass(MSSymbolInstance)) {
                var symbol = pageChild
                findAndDetachFromSymbol(symbol, symbol.nodeName())
            }
        }

        function findAndDetachFromSymbol(symbol, rootName) {
            var symbolName = symbol.nodeName();
            symbol = symbol.detachByReplacingWithGroup();

            if (symbol) {
                if (symbol.nodeName()) {
                    symbol.nodeName = symbolName
                }

                var sublayersLoop = symbol.children().objectEnumerator()
                while (sublayer = sublayersLoop.nextObject()) {
                    if (!isLayerNameInvalid(sublayer.nodeName())) {
                        sublayer.nodeName = rootName
                        if (sublayer.isMemberOfClass(MSSymbolInstance)) {
                            findAndDetachFromSymbol(sublayer, rootName)
                        }
                    }
                }
            }
        }

        // // Finding text layers
        var resultArray = NSMutableArray.array()

        var artboardsLoop = artboards.objectEnumerator()
        while (artboard = artboardsLoop.nextObject()) {
            var artboardDict = NSMutableDictionary.dictionary()
            artboardDict["artboardName"] = artboard.nodeName()
            artboardDict["strings"] = NSMutableArray.array()

            var layersLoop = artboard.layers().reverseObjectEnumerator()
            while (layer = layersLoop.nextObject()) {
                iterateThroughInnerLayersAndValidate(layer)
            }

            resultArray.addObject(artboardDict)

            function iterateThroughInnerLayersAndValidate(layer) {
                if (!layer.nodeName()) {
                    return
                }

                var layerName = layer.nodeName()

                if (isLayerNameInvalid(layerName)) {
                    return
                }

                if (layer.isMemberOfClass(MSLayerGroup)) {
                    var sublayersLoop = layer.layers().reverseObjectEnumerator()
                    while (sublayer = sublayersLoop.nextObject()) {
                        iterateThroughInnerLayersAndValidate(sublayer)
                    }
                } else if (layer.isMemberOfClass(MSTextLayer)) {
                    var artboardName = artboard.nodeName();
                    var layerName = layer.nodeName();
                    var text = layer.attributedString().string().stringByReplacingOccurrencesOfString_withString("\n"," ")

                    var stringKey = layerName

                    var stringObject = NSMutableDictionary.dictionary();
                    stringObject[stringKey] = text

                    artboardDict["strings"].addObject(stringObject)
                }
            }
        }

        document.documentData().removePage(tempPage)

        // Configuring save panel
        var savePanel = NSSavePanel.savePanel()
        savePanel.allowedFileTypes = ["txt"]
        savePanel.nameFieldStringValue = originalPage.nodeName()

        // Launching alert
        var result = savePanel.runModal()
        if (result == NSFileHandlingPanelOKButton) {
            var resultString = ""

            var resultsLoop = resultArray.objectEnumerator()
            while (resultDict = resultsLoop.nextObject()) {
                var artboardName = resultDict["artboardName"]

                var stringsLoop = resultDict["strings"].objectEnumerator()
                while (stringObject = stringsLoop.nextObject()) {
                    var stringKey = stringObject.allKeys().firstObject()
                    var stringText = stringObject[stringKey]

                    var fileNamePrefix = savePanel.nameFieldStringValue().componentsSeparatedByString(" ").componentsJoinedByString("_")

                    resultString += "::" + fileNamePrefix + "_" + artboardName + "_" + stringKey + ":: = \"" + stringText + "\"\n"
                }
                resultString += "\n"
            }

            resultString = NSString.stringWithString(resultString)

            resultString.writeToFile_atomically_encoding_error(savePanel.URL().path(), true, NSUTF8StringEncoding, null)
        }
    }
}
