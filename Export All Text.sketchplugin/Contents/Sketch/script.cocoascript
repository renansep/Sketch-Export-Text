@import 'sketch-nibui.js'

var onRun = function(context) {

    // General Declarations
    var selection = context.selection
    var document = context.document
    var originalPage = document.currentPage()

    var pathToContentsFolder = context.scriptPath.stringByDeletingLastPathComponent().stringByDeletingLastPathComponent()
    var pathToSettingsFile = pathToContentsFolder.stringByAppendingPathComponent("/Sketch/LastSettings.plist")

    /* Alert */

    // Getting accessory view
    var nibUI = new NibUI(context, "UIBundle", "MyNibUI", [
                           "skipLayersTextField"
                           ])

    // Configuring alert
    var alert = NSAlert.alloc().init()

    var iconPath = pathToContentsFolder.stringByAppendingPathComponent("/Resources/Icon.png")
    alert.icon = NSImage.new().initWithContentsOfFile(iconPath)

    alert.messageText = 'Exportar texto de "' + originalPage.nodeName() + '" para arquivo'
    var alertMessageTextLastWordLocation = alert.messageText().rangeOfString_options(" ", NSBackwardsSearch).location
    var alertMessageTextWithoutLastWord = alert.messageText().substringToIndex(alertMessageTextLastWordLocation)

    alert.addButtonWithTitle("Exportar")
    alert.addButtonWithTitle("Cancelar")

    alert.accessoryView = nibUI.view

    // Launching alert
    var result = alert.runModal()

    if (result == NSAlertFirstButtonReturn) {
        var skipLayerNames = nibUI.skipLayersTextField.stringValue() != "" ? nibUI.skipLayersTextField.stringValue().componentsSeparatedByString(", ") : NSArray.new();
        skipLayerNames = skipLayerNames.arrayByAddingObject("status bar");
        var parameters = NSDictionary.dictionaryWithDictionary({
            "skipLayerNames" : skipLayerNames
        })

        mainFunction(parameters)
    }

    /* Main Function */

    function mainFunction(parameters) {

        // Creating Temp Page
        var tempPage = originalPage.copy()
        tempPage.name = "Temp Page"
        document.documentData().addPage(tempPage)

        // Getting rid of symbols
        var exportedInstanceLoopDict = NSMutableDictionary.dictionary()

        var pageChildrenLoop = tempPage.children().objectEnumerator()
        while (pageLayer = pageChildrenLoop.nextObject()) {
            findAndDetachFromSymbol(pageLayer)
        }

        function findAndDetachFromSymbol(layer) {
            if (layer.isMemberOfClass(MSSymbolInstance)) {

                var layerName = layer.nodeName()
                layer = layer.detachByReplacingWithGroup()

                if (layer) {
                    if (layer.nodeName()) { layer.nodeName = layerName }

                    exportedInstanceLoopDict[layer.objectID()] = layer.children().objectEnumerator()
                    while (innerLayer = exportedInstanceLoopDict[layer.objectID()].nextObject()) {
                        findAndDetachFromSymbol(innerLayer)
                    }
                }
            }
        }

        // Finding text layers
        var resultDict = NSMutableDictionary.dictionary()

        iterateThroughInnerLayersAndValidate(tempPage)

        function iterateThroughInnerLayersAndValidate(layerGroup) {
            if ( !isLayerNameValid(layerGroup.name()) ) { return }

            var groupLayersLoop = layerGroup.layers().objectEnumerator()
            while (groupChildLayer = groupLayersLoop.nextObject()) {
                if ( groupChildLayer.isMemberOfClass(MSArtboardGroup) || groupChildLayer.isMemberOfClass(MSLayerGroup) || groupChildLayer.isMemberOfClass(MSSymbolMaster) ) {
                    iterateThroughInnerLayersAndValidate(groupChildLayer)
                } else {
                    var artboardName = "Artboard: "
                    artboardName += groupChildLayer.parentArtboard() ? groupChildLayer.parentArtboard().nodeName() : "No Artboard"
                    itentifyAndAddResult(groupChildLayer, artboardName)
                }
            }
        }

        // Validating results and making dictionary
        function itentifyAndAddResult(layer, key) {
            if (layer.isMemberOfClass(MSTextLayer)) {
                if (!isLayerNameValid(layer.nodeName())) { return }
                var preparedString = prepareString(layer.attributedString().string())
                addResult(preparedString, key)
            }

            function prepareString(string) {
                return string.stringByReplacingOccurrencesOfString_withString("\n"," ")
            }

            function addResult(string, key) {
                if (resultDict.objectForKey(key)) {
                    resultDict[key].addObject(string)
                } else {
                    resultDict[key] = NSMutableArray.array()
                    resultDict[key].addObject(string)
                }
            }
        }

        // Settings: Skip Layers
        function isLayerNameValid(layerName) {
            if (parameters["skipLayerNames"] != 0) {
                var skipLayerNamesLoop = parameters["skipLayerNames"].objectEnumerator()
                while (skipLayerName = skipLayerNamesLoop.nextObject()) {
                    if (skipLayerName.isEqualToString(layerName)) { return false }
                }
            }
            return true
        }

        document.documentData().removePage(tempPage)

        // Preparing result string
        var resultString = ""

        var resultKeysLoop = resultDict.allKeys().objectEnumerator()
        while (resultKey = resultKeysLoop.nextObject()) {

            // Artboard name
            resultString += resultKey + "\n\n"

            var stringsLoop = resultDict[resultKey].objectEnumerator()
            while (string = stringsLoop.nextObject()) {
                resultString += "::" + string + ":: = \"\"\n"
            }
            resultString += "\n"
        }
        resultString = NSString.stringWithString(resultString)

        saveToFile(resultString)

        function saveToFile(string) {

            // Configuring save panel
            var savePanel = NSSavePanel.savePanel()
            savePanel.allowedFileTypes = ["txt"]
            savePanel.nameFieldStringValue = originalPage.nodeName() + "_pt"

            // Launching alert
            var result = savePanel.runModal()
            if (result == NSFileHandlingPanelOKButton) {
                string.writeToFile_atomically_encoding_error(savePanel.URL().path(),
                                                             true, NSUTF8StringEncoding, null)
            }
        }
    }
}
